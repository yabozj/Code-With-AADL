--  This AADL model illustrates how to model a simple interaction
--  between tasks, in a local or distributed environment.
--
--  One task pings another, sending a data periodically.
--
--  $Id: software.aadl 344 2007-04-17 14:48:16Z zalila $

package Software
public
  with Data_Model;
  --with Programming_Properties;

----------
-- Data --
----------

data Simple_Type
properties
	Data_Model::Data_Representation => integer;
end Simple_Type;

-----------------
-- Subprograms --
-----------------

subprogram Do_Ping_Spg
features
  Data_Source : out parameter Simple_Type;
properties
  source_language => (C);
  source_name     => "user_do_ping_spg";
  source_text     => ("ping.c");
end Do_Ping_Spg;

subprogram M_Spg
features
  Data_Sink : in parameter Simple_Type;
  Data_Out : out parameter Simple_Type;
  Data_Out2 :out parameter Simple_Type;
properties
  source_language => (C);
  source_name     => "user_ping_mul";
  source_text     => ("ping.c");
end M_Spg;

subprogram Ping_Spg
features
  Data_Sink : in parameter Simple_Type;
properties
  source_language => (C);
  source_name     => "user_ping_spg";
  source_text     => ("ping.c");
end Ping_Spg;


-------------
-- Threads --
-------------

thread P
features
  Data_Source : out event data port Simple_Type;
end P;

thread implementation P.Impl
calls Mycalls: {
  P_Spg : subprogram Do_Ping_Spg;
};
connections
 c1: parameter P_Spg.Data_Source -> Data_Source;
properties
  Recover_Entrypoint_Source_Text     => "recover";
  Dispatch_Protocol                  => Periodic;
  Period                             => 2000 Ms;
  Deadline                           => 2000 ms;
  Priority                           => 2;
  Dispatch_Offset                    => 500 Ms;
end P.Impl;


subprogram total
features
	da_in:  in parameter Simple_Type;
end total;
	
subprogram implementation total.impl
calls 
	call_seq:{
  		M_Spg : subprogram M_Spg;
  		Q1_Spg : subprogram Ping_Spg;
		Q2_Spg : subprogram Ping_Spg;
	};
	connections
		da1: parameter da_in -> M_Spg.Data_Sink;
		da2: parameter M_Spg.Data_Out -> Q1_Spg.Data_Sink;
		da3: parameter M_Spg.Data_Out2 -> Q2_Spg.Data_Sink;
end total.impl;


thread Q
features
  Data_Sink : in event data port Simple_Type;
end Q;

thread implementation Q.Impl
calls 
Mycalls: {
  T_Spg : subprogram total.impl;
};
connections
  c1: parameter Data_Sink -> T_Spg.da_in;
properties
  Dispatch_Protocol                  => Sporadic;
  Period                             => 1000 Ms;
  deadline                           => 1000 Ms;
  Priority                           => 1;
end Q.Impl;

end Software;
